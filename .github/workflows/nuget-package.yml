name: Build NuGet Package

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version (default: 1.0.0)'
        required: false
        default: '1.0.0'
        type: string

env:
  DENOFIZ_VERSION: ${{ github.event.inputs.version || '1.0.0' }}

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '[17.0,)'
          msbuild-architecture: x64

      - name: Setup Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Install dependencies
        shell: pwsh
        run: |
          choco install -y swig make

      - uses: lukka/get-cmake@latest

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'

      - name: Configure & Build
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'Debug_MSVC'
          buildPreset: 'Debug_MSVC'
          configurePresetAdditionalArgs: "['-DDENOFIZ_VERSION=${{ env.DENOFIZ_VERSION }}', '-DBUILD_EXAMPLES=OFF']"
          buildPresetAdditionalArgs: "['--target', 'DenOfIzGraphicsCSharp']"

      - name: Package artifacts
        shell: pwsh
        run: |
          mkdir -p artifacts/runtimes/win-x64/native

          # Copy the C# wrapper DLL
          Copy-Item build/DenOfIz/Debug_MSVC/CSharp/Project/Lib/DenOfIzGraphicsCSharp.dll artifacts/runtimes/win-x64/native/

          # Copy the main library file
          if (Test-Path build/DenOfIz/Debug_MSVC/CSharp/Project/Native/DenOfIzGraphics.dll) {
              Copy-Item build/DenOfIz/Debug_MSVC/CSharp/Project/Native/DenOfIzGraphics.dll artifacts/runtimes/win-x64/native/
              Write-Host "Copied shared library DenOfIzGraphics.dll"
          } elseif (Test-Path build/DenOfIz/Debug_MSVC/CSharp/Project/Native/DenOfIzGraphics.lib) {
              Copy-Item build/DenOfIz/Debug_MSVC/CSharp/Project/Native/DenOfIzGraphics.lib artifacts/runtimes/win-x64/native/
              Write-Host "Copied static library DenOfIzGraphics.lib"
          } else {
              Write-Host "ERROR: Neither DenOfIzGraphics.dll nor DenOfIzGraphics.lib was found!"
              exit 1
          }

          # Copy additional DLLs
          Copy-Item build/DenOfIz/Debug_MSVC/dxcompiler.dll artifacts/runtimes/win-x64/native/
          Copy-Item build/DenOfIz/Debug_MSVC/dxil.dll artifacts/runtimes/win-x64/native/
          Copy-Item build/DenOfIz/Debug_MSVC/metalirconverter.dll artifacts/runtimes/win-x64/native/

          # Copy C# code files
          mkdir -p artifacts/code/
          Copy-Item -Recurse build/DenOfIz/Debug_MSVC/CSharp/Project/Code/* artifacts/code/

      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: artifacts/

      - name: Build NuGet Package
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'Debug_MSVC'
          buildPreset: 'Debug_MSVC'
          buildPresetAdditionalArgs: "['--target', 'DenOfIzNuget']"

      - name: Upload NuGet package
        uses: actions/upload-artifact@v4
        with:
          name: DenOfIzGraphics-Windows-${{ env.DENOFIZ_VERSION }}
          path: Swig/Targets/CSharp/NuGet_Out/DenOfIzGraphics.${{ env.DENOFIZ_VERSION }}.nupkg

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build build-essential
          sudo apt-get install -y swig mono-complete
          sudo apt-get install -y libglu1-mesa-dev freeglut3-dev libvulkan-dev libsdl2-dev
          sudo apt-get install -y libfreetype-dev libharfbuzz-dev
          sudo apt-get install -y libltdl-dev libtool autoconf automake autoconf-archive
          sudo apt-get install -y libwayland-dev libxkbcommon-dev libegl1-mesa-dev
          sudo apt-get install -y libibus-1.0-dev

      - uses: lukka/get-cmake@latest

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'

      - name: Configure & Build
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'Debug_Linux'
          buildPreset: 'Debug_Linux'
          configurePresetAdditionalArgs: "['-DDENOFIZ_VERSION=${{ env.DENOFIZ_VERSION }}', '-DBUILD_EXAMPLES=OFF']"
          buildPresetAdditionalArgs: "['--target', 'DenOfIzGraphicsCSharp']"

      - name: Package artifacts
        run: |
          mkdir -p artifacts/runtimes/linux-x64/native
          cp build/DenOfIz/Debug_Linux/CSharp/Project/Lib/libDenOfIzGraphicsCSharp.so artifacts/runtimes/linux-x64/native/

          # Check for and copy the appropriate DenOfIzGraphics library (shared or static)
          if [ -f build/DenOfIz/Debug_Linux/CSharp/Project/Native/libDenOfIzGraphics.so ]; then
            cp build/DenOfIz/Debug_Linux/CSharp/Project/Native/libDenOfIzGraphics.so artifacts/runtimes/linux-x64/native/
            echo "Copied shared library libDenOfIzGraphics.so"
          elif [ -f build/DenOfIz/Debug_Linux/CSharp/Project/Native/libDenOfIzGraphics.a ]; then
            cp build/DenOfIz/Debug_Linux/CSharp/Project/Native/libDenOfIzGraphics.a artifacts/runtimes/linux-x64/native/
            echo "Copied static library libDenOfIzGraphics.a"
          else
            echo "ERROR: Neither libDenOfIzGraphics.so nor libDenOfIzGraphics.a was found!"
            exit 1
          fi

          cp build/DenOfIz/Debug_Linux/libdxcompiler.so artifacts/runtimes/linux-x64/native/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: artifacts/

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install dependencies
        run: |
          brew install ninja
          brew install swig mono
          brew install freetype harfbuzz
          brew install sdl2
          brew install autoconf automake autoconf-archive

      - uses: lukka/get-cmake@latest

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'

      - name: Configure & Build
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'Debug_OSX'
          buildPreset: 'Debug_OSX'
          configurePresetAdditionalArgs: "['-DDENOFIZ_VERSION=${{ env.DENOFIZ_VERSION }}', '-DBUILD_EXAMPLES=OFF']"
          buildPresetAdditionalArgs: "['--target', 'DenOfIzGraphicsCSharp']"

      - name: Package artifacts
        run: |
          mkdir -p artifacts/runtimes/osx-x64/native
          cp build/DenOfIz/Debug_OSX/CSharp/Project/Lib/libDenOfIzGraphicsCSharp.dylib artifacts/runtimes/osx-x64/native/

          # Check for and copy the appropriate DenOfIzGraphics library (shared or static)
          if [ -f build/DenOfIz/Debug_OSX/CSharp/Project/Native/libDenOfIzGraphics.dylib ]; then
            cp build/DenOfIz/Debug_OSX/CSharp/Project/Native/libDenOfIzGraphics.dylib artifacts/runtimes/osx-x64/native/
            echo "Copied shared library libDenOfIzGraphics.dylib"
          elif [ -f build/DenOfIz/Debug_OSX/CSharp/Project/Native/libDenOfIzGraphics.a ]; then
            cp build/DenOfIz/Debug_OSX/CSharp/Project/Native/libDenOfIzGraphics.a artifacts/runtimes/osx-x64/native/
            echo "Copied static library libDenOfIzGraphics.a"
          else
            echo "ERROR: Neither libDenOfIzGraphics.dylib nor libDenOfIzGraphics.a was found!"
            exit 1
          fi

          cp build/DenOfIz/Debug_OSX/libmetalirconverter.dylib artifacts/runtimes/osx-x64/native/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: artifacts/

  build-denofiz-nuget:
    runs-on: windows-latest
    needs: [build-windows, build-linux, build-macos]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      - name: Install dependencies
        shell: pwsh
        run: |
          choco install -y swig nuget.commandline

      - uses: lukka/get-cmake@latest

      - name: Download Windows Artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-artifacts
          path: windows-artifacts

      - name: Download Linux Artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts
          path: linux-artifacts

      - name: Download macOS Artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-artifacts
          path: macos-artifacts

      - name: Prepare NuGet package structure
        shell: pwsh
        run: |
          # Prepare directory structure
          $nugetDir = "Swig/Targets/CSharp/NuGet"

          # Create necessary directories
          mkdir -p $nugetDir/lib/netstandard2.0
          mkdir -p $nugetDir/src_gen
          mkdir -p $nugetDir/build
          mkdir -p $nugetDir/runtimes/win-x64/native
          mkdir -p $nugetDir/runtimes/linux-x64/native
          mkdir -p $nugetDir/runtimes/osx-x64/native

          # Copy C# code files
          Write-Host "Copying C# source files"
          Copy-Item -Recurse windows-artifacts/code/* $nugetDir/src_gen/

          # Copy runtimes
          Write-Host "Copying Windows runtime files"
          Copy-Item windows-artifacts/runtimes/win-x64/native/* $nugetDir/runtimes/win-x64/native/

          Write-Host "Copying Linux runtime files"
          Copy-Item linux-artifacts/runtimes/linux-x64/native/* $nugetDir/runtimes/linux-x64/native/

          Write-Host "Copying macOS runtime files"
          Copy-Item macos-artifacts/runtimes/osx-x64/native/* $nugetDir/runtimes/osx-x64/native/

      - name: Build managed DLL
        shell: pwsh
        run: |
          Push-Location Swig/Targets/CSharp/NuGet
          dotnet build ./DenOfIzGraphics.csproj -c Release --output lib/netstandard2.0
          if (!$?) {
            Write-Error "Failed to build managed DLL"
            exit 1
          }
          Pop-Location

      - name: Create NuGet package
        shell: pwsh
        run: |
          mkdir -p Swig/Targets/CSharp/NuGet_Out

          # Update version in nuspec if needed
          $nuspecFile = "Swig/Targets/CSharp/NuGet/DenOfIzGraphics.nuspec"
          if (Test-Path $nuspecFile) {
            $nuspec = [xml](Get-Content $nuspecFile)
            $nuspec.package.metadata.version = "${{ env.DENOFIZ_VERSION }}"
            $nuspec.Save($nuspecFile)
          }

          # Pack the NuGet package
          nuget pack Swig/Targets/CSharp/NuGet/DenOfIzGraphics.nuspec -Version ${{ env.DENOFIZ_VERSION }} -OutputDirectory Swig/Targets/CSharp/NuGet_Out

      - name: Upload Cross-Platform NuGet package
        uses: actions/upload-artifact@v4
        with:
          name: DenOfIzGraphics-CrossPlatform-${{ env.DENOFIZ_VERSION }}
          path: Swig/Targets/CSharp/NuGet_Out/DenOfIzGraphics.${{ env.DENOFIZ_VERSION }}.nupkg

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: Swig/Targets/CSharp/NuGet_Out/DenOfIzGraphics.${{ env.DENOFIZ_VERSION }}.nupkg
          name: DenOfIzGraphics ${{ env.DENOFIZ_VERSION }}
          body: |
            DenOfIzGraphics NuGet package ${{ env.DENOFIZ_VERSION }}

            This package contains binaries for:
            - Windows (x64)
            - macOS (x64)
            - Linux (x64)

  publish-nuget:
    runs-on: windows-latest
    needs: [build-denofiz-nuget]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download NuGet Package
        uses: actions/download-artifact@v4
        with:
          name: DenOfIzGraphics-CrossPlatform-${{ env.DENOFIZ_VERSION }}
          path: ./

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      - name: Publish to NuGet
        run: |
          dotnet nuget push DenOfIzGraphics.${{ env.DENOFIZ_VERSION }}.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
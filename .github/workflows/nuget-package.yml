name: Build NuGet Package

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version (default: 1.0.0)'
        required: false
        default: '1.0.0'
        type: string

env:
  DENOFIZ_VERSION: ${{ github.event.inputs.version || '1.0.0' }}
  # Set policy version for CMake to handle outdated libraries
  CMAKE_POLICY_VERSION_MINIMUM: "3.5"

jobs:
  # Build on Windows with static libraries - current working approach
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Setup vcpkg
        shell: pwsh
        run: |
          if (-Not (Test-Path -Path "vcpkg")) {
            git clone https://github.com/microsoft/vcpkg.git
          }
          cd vcpkg
          if (-Not (Test-Path -Path "vcpkg.exe")) {
            .\bootstrap-vcpkg.bat
          }

      - name: Cache vcpkg packages
        uses: actions/cache@v4
        with:
          path: vcpkg/installed
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Install dependencies
        shell: pwsh
        run: |
          choco install -y cmake ninja
          choco install -y swig

      - name: Configure
        shell: pwsh
        run: |
          # Use full path for CMakePresets.json and set policy minimum version
          cmake --preset=Debug_MSVC -DDENOFIZ_VERSION=${{ env.DENOFIZ_VERSION }} -S ${{ github.workspace }} `
            -DCMAKE_POLICY_VERSION_MINIMUM=${{ env.CMAKE_POLICY_VERSION_MINIMUM }}

      - name: Build NuGet Package
        shell: pwsh
        run: |
          cmake --build build/DenOfIz/Debug_MSVC --target DenOfIzNuget

      - name: Upload NuGet package
        uses: actions/upload-artifact@v4
        with:
          name: DenOfIzGraphics-Windows-${{ env.DENOFIZ_VERSION }}
          path: Swig/Targets/CSharp/NuGet_Out/DenOfIzGraphics.${{ env.DENOFIZ_VERSION }}.nupkg

  # Cross-platform build approach
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build build-essential
          sudo apt-get install -y swig mono-complete
          sudo apt-get install -y libglu1-mesa-dev freeglut3-dev libvulkan-dev libsdl2-dev
          sudo apt-get install -y libfreetype-dev libharfbuzz-dev

      - name: Setup vcpkg
        run: |
          if [ ! -d "vcpkg" ]; then
            git clone https://github.com/microsoft/vcpkg.git
          fi
          cd vcpkg
          if [ ! -f "./vcpkg" ]; then
            ./bootstrap-vcpkg.sh
          fi

      - name: Cache vcpkg packages
        uses: actions/cache@v4
        with:
          path: vcpkg/installed
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Configure
        run: |
          # Use full path for CMakePresets.json and set policy minimum version
          cmake --preset=Debug_Linux -DDENOFIZ_VERSION=${{ env.DENOFIZ_VERSION }} -S ${{ github.workspace }} \
            -DCMAKE_POLICY_VERSION_MINIMUM=${{ env.CMAKE_POLICY_VERSION_MINIMUM }}

      - name: Build
        run: |
          cmake --build build/DenOfIz/Debug_Linux --target DenOfIzGraphicsCSharp

      - name: Package artifacts
        run: |
          mkdir -p artifacts/runtimes/linux-x64/native
          cp build/DenOfIz/Debug_Linux/CSharp/Project/Lib/libDenOfIzGraphicsCSharp.so artifacts/runtimes/linux-x64/native/
          cp build/DenOfIz/Debug_Linux/CSharp/Project/Native/libDenOfIzGraphics.so artifacts/runtimes/linux-x64/native/
          cp build/DenOfIz/Debug_Linux/libdxcompiler.so artifacts/runtimes/linux-x64/native/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: artifacts/

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install dependencies
        run: |
          brew install cmake ninja
          brew install swig mono
          brew install freetype harfbuzz
          brew install sdl2

      - name: Setup vcpkg
        run: |
          if [ ! -d "vcpkg" ]; then
            git clone https://github.com/microsoft/vcpkg.git
          fi
          cd vcpkg
          if [ ! -f "./vcpkg" ]; then
            ./bootstrap-vcpkg.sh
          fi

      - name: Cache vcpkg packages
        uses: actions/cache@v4
        with:
          path: vcpkg/installed
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Configure
        run: |
          # Use full path for CMakePresets.json and set policy minimum version
          cmake --preset=Debug_OSX -DDENOFIZ_VERSION=${{ env.DENOFIZ_VERSION }} -S ${{ github.workspace }} \
            -DCMAKE_POLICY_VERSION_MINIMUM=${{ env.CMAKE_POLICY_VERSION_MINIMUM }}

      - name: Build
        run: |
          cmake --build build/DenOfIz/Debug_OSX --target DenOfIzGraphicsCSharp

      - name: Package artifacts
        run: |
          mkdir -p artifacts/runtimes/osx-x64/native
          cp build/DenOfIz/Debug_OSX/CSharp/Project/Lib/libDenOfIzGraphicsCSharp.dylib artifacts/runtimes/osx-x64/native/
          cp build/DenOfIz/Debug_OSX/CSharp/Project/Native/libDenOfIzGraphics.dylib artifacts/runtimes/osx-x64/native/
          cp build/DenOfIz/Debug_OSX/libmetalirconverter.dylib artifacts/runtimes/osx-x64/native/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: artifacts/

  # Combine artifacts for cross-platform NuGet package
  build-cross-platform-nuget:
    runs-on: windows-latest
    needs: [build-windows, build-linux, build-macos]
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      - name: Setup SWIG and CMake
        shell: pwsh
        run: |
          choco install -y cmake swig

      - name: Download Windows NuGet Package
        uses: actions/download-artifact@v4
        with:
          name: DenOfIzGraphics-Windows-${{ env.DENOFIZ_VERSION }}
          path: windows-package

      - name: Download Linux Artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts
          path: linux-artifacts

      - name: Download macOS Artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-artifacts
          path: macos-artifacts

      - name: Extract Windows NuGet Package
        shell: pwsh
        run: |
          mkdir -p extracted
          cd extracted
          # Rename nupkg to zip so we can extract it
          $packagePath = (Get-ChildItem -Path ../windows-package/*.nupkg).FullName
          Copy-Item $packagePath package.zip
          Expand-Archive package.zip -DestinationPath ./

      - name: Merge Cross-Platform Artifacts
        shell: pwsh
        run: |
          # Create directory structure for cross-platform NuGet package
          $packageDir = "cross-platform-package"
          mkdir -p $packageDir
          
          # Copy extracted Windows NuGet package content as base
          Copy-Item extracted/* $packageDir -Recurse
          
          # Merge Linux artifacts
          Copy-Item linux-artifacts/runtimes/linux-x64/native/* $packageDir/runtimes/linux-x64/native/ -Force
          
          # Merge macOS artifacts
          Copy-Item macos-artifacts/runtimes/osx-x64/native/* $packageDir/runtimes/osx-x64/native/ -Force
          
          # Update nuspec file if needed
          $nuspecFile = "$packageDir/DenOfIzGraphics.nuspec"
          if (Test-Path $nuspecFile) {
            $nuspec = [xml](Get-Content $nuspecFile)
            $nuspec.package.metadata.version = "${{ env.DENOFIZ_VERSION }}"
            $nuspec.Save($nuspecFile)
          }
          
          # Create cross-platform NuGet package
          cd $packageDir
          nuget pack -Version ${{ env.DENOFIZ_VERSION }} -OutputDirectory ../

      - name: Upload Cross-Platform NuGet package
        uses: actions/upload-artifact@v4
        with:
          name: DenOfIzGraphics-CrossPlatform-${{ env.DENOFIZ_VERSION }}
          path: DenOfIzGraphics.${{ env.DENOFIZ_VERSION }}.nupkg
          
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: DenOfIzGraphics.${{ env.DENOFIZ_VERSION }}.nupkg
          name: DenOfIzGraphics ${{ env.DENOFIZ_VERSION }}
          body: |
            DenOfIzGraphics NuGet package ${{ env.DENOFIZ_VERSION }}
            
            This package contains binaries for:
            - Windows (x64)
            - macOS (x64)
            - Linux (x64)

  publish-nuget:
    runs-on: windows-latest
    needs: [build-cross-platform-nuget]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download NuGet Package
        uses: actions/download-artifact@v4
        with:
          name: DenOfIzGraphics-CrossPlatform-${{ env.DENOFIZ_VERSION }}
          path: ./

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      - name: Publish to NuGet
        run: |
          dotnet nuget push DenOfIzGraphics.${{ env.DENOFIZ_VERSION }}.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
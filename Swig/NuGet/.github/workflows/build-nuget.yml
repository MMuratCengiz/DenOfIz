name: Build NuGet Package

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup CMake
        uses: lukka/get-cmake@latest

      - name: Install SWIG
        run: |
          choco install swig -y

      - name: Configure and build
        run: |
          mkdir build
          cd build
          cmake .. -DSWIG_CSHARP=ON -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF
          cmake --build . --config Release

      - name: Upload Windows libraries
        uses: actions/upload-artifact@v3
        with:
          name: windows-x64-libs
          path: build/CSharp/Project/Lib

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake swig libvulkan-dev

      - name: Configure and build
        run: |
          mkdir build
          cd build
          cmake .. -DSWIG_CSHARP=ON -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF
          cmake --build . --config Release

      - name: Upload Linux libraries
        uses: actions/upload-artifact@v3
        with:
          name: linux-x64-libs
          path: build/CSharp/Project/Lib

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          brew install cmake swig

      - name: Configure and build
        run: |
          mkdir build
          cd build
          cmake .. -DSWIG_CSHARP=ON -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF
          cmake --build . --config Release

      - name: Upload macOS libraries
        uses: actions/upload-artifact@v3
        with:
          name: macos-x64-libs
          path: build/CSharp/Project/Lib

  create-nuget:
    needs: [build-windows, build-linux, build-macos]
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Install NuGet
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: 'latest'

      - name: Download Windows libraries
        uses: actions/download-artifact@v3
        with:
          name: windows-x64-libs
          path: nuget_package/runtimes/win-x64/native

      - name: Download Linux libraries
        uses: actions/download-artifact@v3
        with:
          name: linux-x64-libs
          path: nuget_package/runtimes/linux-x64/native

      - name: Download macOS libraries
        uses: actions/download-artifact@v3
        with:
          name: macos-x64-libs
          path: nuget_package/runtimes/osx-x64/native

      - name: Build C# project
        run: |
          mkdir -p nuget_package/lib/netstandard2.0
          cd Swig/Targets/CSharp/Project
          dotnet build -c Release
          cp bin/Release/netstandard2.0/DenOfIzGraphics.dll ../../../nuget_package/lib/netstandard2.0/
          cp bin/Release/netstandard2.0/DenOfIzGraphics.xml ../../../nuget_package/lib/netstandard2.0/

      - name: Prepare NuGet package
        run: |
          mkdir -p nuget_package/build
          mkdir -p nuget_package/docs
          cp Swig/NuGet/README.md nuget_package/docs/
          cp Swig/NuGet/DenOfIzGraphics.targets.in nuget_package/build/DenOfIzGraphics.targets

      - name: Get version from tag
        id: get_version
        run: |
          if ("${{ github.ref_type }}" -eq "tag" -and "${{ github.ref }}" -match "^refs/tags/v(.*)$") {
            echo "VERSION=$($Matches[1])" >> $env:GITHUB_OUTPUT
          } else {
            echo "VERSION=1.0.0" >> $env:GITHUB_OUTPUT
          }

      - name: Create .nuspec file
        run: |
          $version = "${{ steps.get_version.outputs.VERSION }}"
          $year = (Get-Date).Year
          $content = Get-Content "Swig/NuGet/DenOfIzGraphics.nuspec.in" -Raw
          $content = $content -replace '@PROJECT_VERSION@', $version
          $content = $content -replace '@CURRENT_YEAR@', $year
          Set-Content -Path "nuget_package/DenOfIzGraphics.nuspec" -Value $content

      - name: Pack NuGet package
        run: |
          cd nuget_package
          nuget pack DenOfIzGraphics.nuspec -OutputDirectory ../nuget_output

      - name: Upload NuGet package
        uses: actions/upload-artifact@v3
        with:
          name: nuget-package
          path: nuget_output/*.nupkg

      - name: Publish NuGet package
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          dotnet nuget push ./nuget_output/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
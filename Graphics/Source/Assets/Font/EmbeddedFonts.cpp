/*
Den Of Iz - Game/Game Engine
Copyright (c) 2020-2024 Muhammed Murat Cengiz

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#include "DenOfIzGraphicsInternal/Assets/Font/Embedded/EmbeddedFonts.h"
#include <miniz/miniz.h>
#include <mutex>
#include <vector>
#include "DenOfIzGraphics/Assets/Serde/Font/FontAssetReader.h"
#include "DenOfIzGraphics/Assets/Stream/BinaryReader.h"
#include "DenOfIzGraphics/Utilities/Interop.h"

using namespace DenOfIz;

extern const uint8_t g_InterFontCompressed[];
extern const size_t  g_InterFontCompressedSize;

static std::mutex        g_decompressionMutex;
static std::vector<Byte> g_decompressedData;
static bool              g_isDecompressed = false;

const std::vector<Byte> &EmbeddedFonts::GetInterData( )
{
    if ( g_isDecompressed )
    {
        return g_decompressedData;
    }

    std::lock_guard lock( g_decompressionMutex );
    if ( !g_isDecompressed )
    {
        // Get the uncompressed size (stored in first 8 bytes)
        mz_ulong uncompressedSize = 0;
        memcpy( &uncompressedSize, g_InterFontCompressed, sizeof( mz_ulong ) );

        std::vector<Byte> decompressedBuffer( uncompressedSize );
        // Decompress the data (skip the first 8 bytes which contain the size)
        mz_ulong  destLen = uncompressedSize;
        const int result  = mz_uncompress( decompressedBuffer.data( ), &destLen, g_InterFontCompressed + sizeof( mz_ulong ), g_InterFontCompressedSize - sizeof( mz_ulong ) );

        if ( result != MZ_OK || destLen != uncompressedSize )
        {
            throw std::runtime_error( "Failed to decompress embedded font data" );
        }
        g_decompressedData.resize( uncompressedSize );
        std::memcpy( &g_decompressedData[ 0 ], decompressedBuffer.data( ), uncompressedSize );
        g_isDecompressed = true;
    }
    return g_decompressedData;
}

FontAsset EmbeddedFonts::GetInterVarInternal( )
{
    const auto &interData = GetInterData( );

    ByteArrayView data{ };
    data.Elements    = interData.data( );
    data.NumElements = interData.size( );
    BinaryReader    binaryReader( data );
    FontAssetReader reader( { &binaryReader } );
    return reader.Read( );
}

// Generated by Graphics/Tools/FontToEmbeddedInl.cpp
#include "DenOfIzGraphicsInternal/Assets/Font/Embedded/InterCompressed.inl"
